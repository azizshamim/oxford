= Refactor
* MyLdap needs to be refactored into an interface class (program to an interface)
* Facts needs to be refactored into a Factory (Oxford::LDAP) (Oxford::Facter)
* Host should be another factory class
* Not sure about Object (and all the decendents)

#<Oxford::Host objectClass:<facterHost, device, top>, 
  must:<cn, objectClass>,
  may:<description, factArchitecture, factDomain, factFacterVersion, factFqdn, factHardwareModel, factHardwareisa, 
    factHostname, factId, factIsVirtual, factKernel, factKernelMajVersion, factKernelRelease, factKernelVersion, 
    factLastUpdated, factLsbDistCodename, factLsbDistDescription, factLsbDistId, factLsbDistRelease, 
    factLsbMajDistRelease, factLsbRelease, factMacAddress, factMemoryFree, factMemorySize, factOperatingSystem, 
    factOperatingSystemRelease, factPath, factPhysicalProcessorCount, factProcessorCount, factPs, factPuppetVersion, 
    factRubySiteDir, factRubyVersion, factSelinux, factSelinuxConfigMode, factSelinuxConfigPolicy, factSelinuxCurrentMode, 
    factSelinuxEnforced, factSelinuxMode, factSelinuxPolicyVersion, factSshDsaKey, factSshRsaKey, factSwapFree, factSwapSize, 
    factTimeZone, factUniqueId, factUptime, factUptimeDays, factUptimeHours, factUptimeSeconds, factVirtual, l, o, ou, owner, 
    seeAlso, serialNumber>, cn: ["galactica"], commonName: ["galactica"], description: [], factArchitecture: [], factDomain: [], 
    factFacterVersion: [], factFqdn: ["galactica.test.com"], factHardwareModel: [], factHardwareisa: [], factHostname: [], 
    factId: [], factIsVirtual: [], factKernel: [], factKernelMajVersion: [], factKernelRelease: [], factKernelVersion: [], 
    factLastUpdated: [], factLsbDistCodename: [], factLsbDistDescription: [], factLsbDistId: [], factLsbDistRelease: [], 
    factLsbMajDistRelease: [], factLsbRelease: [], factMacAddress: [], factMemoryFree: [], factMemorySize: [], 
    factOperatingSystem: ["PPwmdvzAlNB"], factOperatingSystemRelease: [], factPath: [], factPhysicalProcessorCount: [], 
    factProcessorCount: [], factPs: [], factPuppetVersion: [], factRubySiteDir: [], factRubyVersion: [], factSelinux: [], 
    factSelinuxConfigMode: [], factSelinuxConfigPolicy: [], factSelinuxCurrentMode: [], factSelinuxEnforced: [], factSelinuxMode: [], 
    factSelinuxPolicyVersion: [], factSshDsaKey: [], factSshRsaKey: [], factSwapFree: [], factSwapSize: [], factTimeZone: [], 
    factUniqueId: [], factUptime: [], factUptimeDays: [], factUptimeHours: [], factUptimeSeconds: [], factVirtual: [], l: [], 
    localityName: [], o: [], objectClass: ["facterHost", "device", "top"], organizationName: [], organizationalUnitName: [], 
    ou: [], owner: [], seeAlso: [], serialNumber: []
>

= Overview
This is the first iteration of oxford, a LDAP bridge between fact generation and LDAP as storage. 

This is a wrapper for polling of facts via the Facter library (http://puppetlabs.com/puppet/related-projects/facter/) and export to LDAP

This has been tested on OpenLDAP

= Requirements
* ruby
* puppet
* facter
* activeldap
* extended fact schema (websages.schema)

= Usage 
* Setup your LDAP server to include the fact schema (inc/websages.schema). 
* Configure your LDAP settings in the configuration file (config/database.yaml)
* run facts.rb (crontab, puppet execute, etc)

= FAQ
Q: Why did you do this instead of using <insert technology here>
A: I like LDAP. While there are a lot of neat solutions on how to handle this problem set,
   I am aiming to reduce the overall technology footprint across places I deploy Puppet, et.
   al. Less technology stacks == less things to manage overall. Plus, LDAP provides me 
   things out of the box like disaster recovery (replication) and HA (multi-master). Win.
   
Q: Why did you not extend Facter?
A: Facter is really good at doing one thing - providing facts. 
   Because this requires schema that is not existent by default in LDAP, I'd isolated
   both functions into very simple pieces UNIX style - my code is really good at 
   writing and reading facts from LDAP. This will allow alternate fact generation tools 
   (ohai, pfacter, etc) to also leverage writing of facts to LDAP. 

= Todo
- Refactor code (potential integration into Facter?)
- add alternate fact generation tools as options. 
- update namespace to include name. 
- Include Puppet custom specific facts when polling for facts.
- Package into gem
- Profit?

